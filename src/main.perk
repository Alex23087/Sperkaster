import_local "includes.h"
open "geometry.perk"

extern vga_fb: Framebuffer*

let pixel_size: int = 2
let hres: uint32_t = cast(uint32_t, 1270 / 2)
let vres: uint32_t = cast(uint32_t, 770 / 2)
fun default_colour(): VESA_Colour {return make_VESA_Colour(0x90, 0xe3, 0xfc, 255);}

// Number of rays to cast for diffuse reflection
let num_rays: int = 3
// Number of times a ray can bounce
let num_bounces: int = 4
// Amount to scatter rays for diffuse reflection
let scatter_amount: float = 0.5
// Animation counter
let ticks: int = 0
let animate: bool = true
// Sleep between frames
let sleep_time: int = 1

fun get_fb(w: Window*): Framebuffer* {
    let fb: Framebuffer* = cast(Framebuffer*, 0);
    BEGIN_C
    fb = (*w).fb;
    END_C;
    return fb;
}

fun get_width(w: Window*): size_t {
    let width: size_t = cast(size_t, 0);
    BEGIN_C
    width = (*w).width;
    END_C;
    return width;
}

fun get_height(w: Window*): size_t {
    let height: size_t = cast(size_t, 0);
    BEGIN_C
    height = (*w).height;
    END_C;
    return height;
}

fun compute_colour (mat: Material, normal: Vec3, ray: Ray*, hit: Vec3, spheres: [Sphere 3], parallelepipeds: [Parallelepiped 1], max_bounces: int): VESA_Colour {
    let reflected_dir: Vec3 = vec3_reflect((*ray).direction, normal);
    let new_origin: Vec3 = vec3_add(hit, vec3_scale(reflected_dir, 0.3));
    if (mat.type == 0) {                    // Solid colour
        return mat.colour;
    } else if (mat.type == 1) {             // Diffuse
        let colour := make_VESA_Colour(0, 0, 0, 255);
        for(let i := 0; i < num_rays; i = i + 1) {
            let direction := vec3_normalized(vec3_perturb(reflected_dir, scatter_amount * (i + 1)));
            let sample := VESA_Colour_scale(
                cast_ray(&(make Ray(origin = new_origin, direction = direction)), spheres, parallelepipeds, max_bounces - 1),
                mat.diffusion / cast(float, num_rays)
            );
            colour = VESA_Colour_add(colour, sample);
        };
        return VESA_Colour_multiply(colour, mat.colour);
    } else if (mat.type == 2) {             // Specular reflection
        return VESA_Colour_multiply(
            cast_ray(&(make Ray(origin = new_origin, direction = reflected_dir)), spheres, parallelepipeds, max_bounces - 1),
            mat.colour
        );
        // Perfect mirror reflection
        // return cast_ray(&(make Ray(origin = new_origin, direction = reflected_dir)), spheres, parallelepipeds, max_bounces - 1);
    } else if (mat.type == -1) {            // Colour by normal
        return VESA_Colour_from_vec3(normal);
    } else if (mat.type == -2) {            // Colour by normal using angle to view direction
        let intensity: float = fclamp(fabs(vec3_dot(normal, (*ray).direction)), 0.0, 1.0);
        return make_VESA_Colour(cast(int, (normal.x + 1.) * 0.5 * 255.0 * intensity), cast(int, (normal.y + 1.) * 0.5 * 255.0 * intensity), cast(int, (normal.z + 1.) * 0.5 * 255.0 * intensity), 255);
    } else if (mat.type == -3) {            // Colour by reflected direction
        return VESA_Colour_from_vec3(reflected_dir);
    } else if (mat.type == -4) {            // Colour by position
        return VESA_Colour_from_vec3(hit);
    };
    // return spheres[cast(int, i)].colour;
    // return make_VESA_Colour(cast(int, (normal.x + 1.) * 0.5 * 255.0), cast(int, (normal.y + 1.) * 0.5 * 255.0), cast(int, (normal.z + 1.) * 0.5 * 255.0), 255);
    return default_colour();
}

fun cast_ray(ray: Ray*, spheres: [Sphere 3], parallelepipeds: [Parallelepiped 1], max_bounces: int): VESA_Colour {
    if (max_bounces <= 0) {
        return default_colour();
    };
    let hit: Vec3? = none;
    for (let i: size_t = cast(size_t, 0); i < spheres.length; i = i + 1) {
        hit = ray_sphere_intersection_point(ray, &spheres[cast(int, i)]);
        if (hit?) {
            let normal := ray_sphere_hit_normal(ray, hit!, &spheres[cast(int, i)]);
            let mat: Material = spheres[cast(int, i)].material;

            return compute_colour(mat, normal, ray, hit!, spheres, parallelepipeds, max_bounces);
        }
    };
    for (let j: size_t = cast(size_t, 0); j < parallelepipeds.length; j = j + 1) {
        hit = ray_parallelepiped_intersection(ray, &parallelepipeds[cast(int, j)]);
        if (hit?) {
            let mat: Material = parallelepipeds[cast(int, j)].material;
            let normal := ray_parallelepiped_hit_normal(ray, hit!, &parallelepipeds[cast(int, j)]);

            return compute_colour(mat, normal, ray, hit!, spheres, parallelepipeds, max_bounces);
        }
    };
    return default_colour();
}

fun juggle_balls(sphere: Sphere*, ticks: int): void {
    let pos_x: float = 20.0 * sin(cast(float, ticks) * 0.1);
    let pos_y: float = fabs(20.0 * cos(cast(float, ticks) * 0.1));
    (*sphere).position = make Vec3(x = pos_x, y = pos_y, z = (*sphere).position.z);
}


fun sperkaster(s: char*): void {
    let in_vell: bool = false;
    let fb: Framebuffer* = cast(Framebuffer*, 0);
    let w: Window* = cast(Window*, 0);
    if (!_vell_is_active()) {
        in_vell = false;
        fb = vga_fb;
    } else {
        in_vell = true;
        w = create_window_with_size("Sperkaster", hres * pixel_size, vres * pixel_size);
        set_window_dirty(w);
        fb = get_fb(w);
    };

    let spheres: [Sphere 3] = [
        make Sphere(
            radius = 8.,
            position = make Vec3(x = -20., y = 0., z = -50.0),
            material = make Material(
                type = 1,
                colour = make_VESA_Colour(255, 0, 0, 255),
                diffusion = 1.
            )
        ),
        make Sphere(
            radius = 8.,
            position = make Vec3(x = 0., y = 0., z = -60.0),
            material = make Material(
                type = 2,
                colour = make_VESA_Colour(200, 250, 200, 255)
            )
        ),
        make Sphere(
            radius = 8.,
            position = make Vec3(x = 20., y = 0., z = -70.0),
            material = make Material(
                type = 1,
                colour = make_VESA_Colour(0, 0, 255, 255),
                diffusion = 1.
            )
        )
        // make Sphere(
        //     radius = 1600.,
        //     position = make Vec3(x = 0., y = -1600., z = -800.0),
        //     material = make Material(
        //         type = 0,
        //         colour = make_VESA_Colour(0x54, 0x3b, 0x0e, 255)
        //     )
        // )
    ];

    let parallelepipeds: [Parallelepiped 1] = [
        make Parallelepiped(
            min = make Vec3(x = -4000., y = -900., z = -4000.),
            max = make Vec3(x = 4000., y = -1100., z = 4000.),
            material = make Material(
                type = 0,
                colour = make_VESA_Colour(0x40, 0x60, 0x40, 255),
                diffusion = 1.
            )
        )
        // ,make Parallelepiped(
        //     min = make Vec3(x = -2000., y = -2000., z = -150.),
        //     max = make Vec3(x = 2000., y = 2000., z = -100.),
        //     material = make Material(
        //         type = 2,
        //         colour = make_VESA_Colour(254, 254, 254, 255)
        //     )
        // )
        // ,make Parallelepiped(
        //     min = make Vec3(x = -2000., y = -2000., z = 150.),
        //     max = make Vec3(x = 2000., y = 2000., z = 100.),
        //     material = make Material(
        //         type = 2,
        //         colour = make_VESA_Colour(254, 254, 254, 255)
        //     )
        // )
    ];

    let camera: PerspectiveCamera = make PerspectiveCamera(
        eye = make Vec3(x = 0.0, y = 10.0, z = 0.0),
        lookat = make Vec3(x = 0.0, y = 10.0, z = -1.0),
        up = make Vec3(x = 0.0, y = -1.0, z = 0.0)
    );

    let light_source: LightSource = make LightSource(
        position = make Vec3(x = 5.0, y = 5.0, z = 0.0),
        intensity = 1.0,
        colour = make_VESA_Colour(255, 255, 255, 255)
    );
    // Aspect ratio correction
    let aspect_ratio: float = cast(float, hres) / cast(float, vres);
    let fov: float = 60.0; // Field of view in degrees
    let fov_rad: float = fov * 3.14159 / 180.0;
    let scale: float = tan(fov_rad * 0.5);
    
    while (true) {
        for (let y: size_t = cast(size_t, 0); y < vres; y = y + 1) {
            for (let x: size_t = cast(size_t, 0); x < hres; x = x + 1) {
                // Normalize to [-1, 1] range first
                let x_norm: float = (cast(float, x) / cast(float, hres)) * 2.0 - 1.0;
                let y_norm: float = (cast(float, y) / cast(float, vres)) * 2.0 - 1.0;
                
                // Apply proper aspect ratio and field of view
                let u: float = -x_norm * aspect_ratio * scale;
                let v: float = y_norm * scale;

                let ray: Ray = camera_get_ray(&camera, u, v);

                let colour: VESA_Colour = cast_ray(&ray, spheres, parallelepipeds, num_bounces);

                fb_set_pixel(x, y, colour, fb);
            };
            if(in_vell) {
                set_window_dirty(w);
            };
        };

        if (animate) {
            juggle_balls(&spheres[1], ticks);
            juggle_balls(&spheres[0], ticks + 20);
            juggle_balls(&spheres[2], ticks + 40);

            ticks = ticks + 1;
        };
        sleep(sleep_time);
    }
}

fun fb_set_pixel(x: size_t, y: size_t, colour: VESA_Colour, fb: Framebuffer*): void {
    BEGIN_C
    if ((x * pixel_size) < (*fb).width && (y * pixel_size) < (*fb).height) {
        for (size_t dy = 0; dy < pixel_size; dy = dy + 1) {
            for (size_t dx = 0; dx < pixel_size; dx = dx + 1) {
            size_t index = (y * pixel_size + dy) * (*fb).width + (x * pixel_size + dx);
            (*fb).fb[index] = colour.val;
            }
        }
    }
    END_C;
}